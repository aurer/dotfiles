#!/usr/bin/env ruby

#########################################################################
# This file is managed centrally, any manual changes might be overwritten
#########################################################################

class Dev
	#
	# Rebuild a site using phing and deployDevelop option
	#
	def self.rebuild(site, *branch)
		if !Dir.exist? "/srv/build/gkdigital/#{site}/source"
			puts "Project files not present - running getProject..."
			system "phing -f /srv/build/webdev-tools/phing/buildfiles/#{site}-build.xml getProject"
		end
		puts "Running deploy.local"
		system "phing -f /srv/build/webdev-tools/phing/buildfiles/#{site}-build.xml deploy.local"
	end

	#
	# Import a database from a stage site
	#
	def self.db_import(site, *branch)
		branch_from = branch[0]
		branch_to = branch[1] ? branch[1] : branch[0]
		db_name = "#{site}_local_#{branch_to.gsub('-', '_')}"

		system "drush @#{site}.stage.#{branch_from} sql-dump > #{site}.stage.#{branch_to}.sql"
		system "mysql -e 'create database if not exists #{db_name}'"
		system "mysql #{db_name} < #{site}.stage.#{branch_to}.sql"
		system "rm #{site}.stage.#{branch_to}.sql"
	end

	#
	# Sync a local database to the stage site
	#
	def self.db_sync(site, *branch)
		branch_from = branch[0]
		branch_to = branch[1] ? branch[1] : branch[0]
		db_name = "#{site}_local_#{branch_to.gsub('-', '_')}"
		db_exists = `mysql -e 'show databases' | grep #{db_name}`.strip == db_name

		# If the database does not exist, import it from stage
		if !db_exists
			self.db_import(site, *branch)
		end

		# Run sql-sync
		system "drush sql-sync @#{site}.stage.#{branch_from} @#{site}.local.#{branch_to} -y --create-db"

		# Enable less dev mode and source maps
		system "drush vset less_devel 1"
		system "drush vset less_source_maps 1"
		system "drush vset preprocess_css 0"
		system "drush vset preprocess_js 0"
	end

	#
	# Sync local files to the stage site
	#
	def self.file_sync(site, *branch)
		branch_from = branch[0]
		branch_to = branch[1] ? branch[1] : branch[0]
		system "drush -y --mode=zrpt rsync @#{site}.stage.#{branch_from}:%files @#{site}.local.#{branch_to}:%files --delete"
	end

	#
	# Sync both database and files to the stage site
	#
	def self.site_sync(site, *branch)
		self.db_sync(site, *branch)
		self.file_sync(site, *branch)
	end

	#
	# Show a list of valid commands
	#
	def self.show_available_functions
		puts
		puts color("Usage", 'yellow')
		puts "dev <command> [site] [branch]"
		puts
		puts color("Available commands", 'yellow')
		puts color("rebuild", 'green') + "          Rebuild a site using phing commands."
		puts color("db-import", 'green') + "        Import a database from a stage site: db-import <site> [branch_from [branch_to]]."
		puts color("db-sync", 'green') + "          Create/sync database with stage site: db-sync <site> [branch_from [branch_to]]."
		puts color("file-sync", 'green') + "        Download/sync files with stage site: file-sync <site> [branch_from [branch_to]]"
		puts color("site-sync", 'green') + "        Run db-sync and file-sync: site-sync <site> [branch_from [branch_to]]"
		puts
		puts "db-sync, file-sync and site-sync, default to the 'develop' branch if none is supplied."
	end

	#
	# If an invalid command is passed, show valid commands
	#
	def self.method_missing(m, *args, &block)
		puts "Command not found"
		show_available_functions
	end
end

#
# Colorise output to terminal
#
def color(string, color)
	c = {
		'red' 		=> "\e[1;31m",
		'yellow' 	=> "\e[1;33m",
		'green' 	=> "\e[1;32m",
	}
	"#{c[color]}#{string}\e[1;0m"
end

#
# Run commands
#
if ARGV.length > 0
	# First argument is the command to run
	command = ARGV[0].gsub('-', '_')

	# Second argument is the site
	site = ARGV[1]
	if !site
		print "Sitename: "
		site = STDIN.gets.chomp
	end

	# Third argument is the branch
	branch = ARGV[2]? ARGV[2] : 'develop'

	# Extra arguments if available
	other = ARGV[3]? ARGV.slice(3) : nil

	# Run command with arguments
	# puts command, site, branch
	Dev.send(command, site, branch, other)
else
	Dev.show_available_functions
end
