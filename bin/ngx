#!/usr/bin/env ruby

class NGX
  def self.vhost_create(*arguments)

    site = arguments[0]
    branch = arguments[1] ? arguments[1] + '.' : ''

    if( !File.directory? "/etc/nginx/conf.d" )
			puts "/etc/nginx/conf.d/ does not exist on this system so this command fails now."
			exit
		end

		input_file = "/etc/nginx/vhost-example.conf"
		output_file = "/etc/nginx/conf.d/#{branch}#{site}.conf"

		# Check if we should overwrite
		if File.exists?(output_file)
			print "Overwrite existing file? (y/n): "
			if STDIN.gets.chomp.downcase != 'y'
				puts 'Aborted'
				exit
			end
		end

		example_content = File.read(input_file)
		new_content = example_content.gsub(/projectcode/, site)

    if branch != ''
      new_content = example_content.gsub(/develop\./, branch)
    end

		File.open("/etc/nginx/conf.d/#{site}.conf", 'w+') { |file| file.puts new_content }
		puts color('Created nginx conf with the following content', 'green')
    puts new_content
  end

  def self.vhost_edit(*arguments)
    search = arguments.first.first
    config_file = self._find_vhost_config(search)

    if config_file
      self._vim_file(config_file)
    else
      puts "No virtual host configuration files found matching '#{search}'"
    end
  end

  def self.vhost_remove(*arguments)
    search = arguments.first.first
    config_file = self._find_vhost_config(search)

    if config_file
      print "Remove file '#{config_file}'? (y/N)"
      should_remove = STDIN.gets.chomp == 'y' ? true : false
      File.delete(config_file) if should_remove
    else
      puts "No virtual host configuration files found matching '#{search}'"
    end
  end

  def self._find_vhost_config(search)
    configs = Dir['/etc/nginx/conf.d/**/*.conf']

    if Dir['/etc/nginx/conf.d/'] == nil
      puts "No nginx configs directory was found at '/etc/nginx/conf.d/'"
      exit
    end

    matches = Array.new
    configs.each do |conf|
      if /\/[\w\.]+?#{search}[\w\.]+?.conf$/.match(conf)
        matches << conf
      end
    end

    if matches.empty?
      return false
    elsif matches.length == 1
      return matches[0]
    else
      file_number = 0
      for i in 0..matches.length - 1
        puts "[#{i}] #{matches[i]}"
      end
      print "Enter the number of the file to edit: "
      file_number = STDIN.gets.chomp
      return matches[file_number.to_i]
    end
  end

  def self._vim_file(file)
    system("vim #{file}")
  end

  def self.reload
    system('service nginx reload')
  end

  def self.restart
    system('service nginx restart')
  end

  def self.check
    system('service nginx status')
    system('service nginx configtest')
  end

  def self.show_available_functions
    puts
		puts green("Usage")
		puts "ngx <command> [options]"
		puts
		puts color("Available commands", 'yellow')
    puts color("vhost-create <site> [branch]", 'green') + "    Create an Nginx virtual host conf file."
    puts color("vhost-edit <site>", 'green') + "               Edit an Nginx virtual host conf file."
    puts color("vhost-remove <site>", 'green') + "             Remove an Nginx virtual host conf file."
    puts color("reload", 'green') + "                          Reload Nginx."
    puts color("restart", 'green') + "                         Restart Nginx."
		puts color("check", 'green') + "                           Show status and run configtest on Nginx."
  end
end

#
# Colorise output to terminal
#
def color(string, color)
	c = {
		'red' 		=> "\e[1;31m",
		'yellow' 	=> "\e[1;33m",
		'green' 	=> "\e[1;32m",
	}
	"#{c[color]}#{string}\e[1;0m"
end
def red(string) color(string, 'red') end
def yellow(string) color(string, 'yellow') end
def green(string) color(string, 'green') end

# Run commands
if ARGV.length > 0
	# First argument is the command to run
	command = ARGV.shift.gsub('-', '_')

	# Extra arguments if available
	arguments = ARGV

	# Run command with arguments
	# puts command, site, branch
	NGX.send(command, arguments)
else
	NGX.show_available_functions
end
