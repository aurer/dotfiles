#!/usr/bin/env ruby

class GK
	#
	# Clone and make a site
	#
	def self.setup_site(site, *branch)
		branch = branch[0]

		# Show a warning if we're not in /srv directory
		if !Dir.pwd.start_with?('/srv')
			puts "This command should be run from /srv/build or similar"
			puts "-----------------------------------------------------"
		end

		# Run drush make?
		print "Make the site? (y/N): "
		make = STDIN.gets.chomp.downcase == 'y' ? true : false

		# Set up git url
		git_url = "git@bitbucket.org:greeneking/#{site}.git"

		# Clone site
		system "mkdir -p #{site}/#{branch}/logs"
		Dir.chdir Dir.pwd + "/#{site}/#{branch}"
		system "git clone #{git_url} webroot && cd webroot && git checkout #{branch}"

		# Make site
		if make
			Dir.chdir Dir.pwd + "/webroot"
			system "drush make #{site}.make --working-copy && git reset --hard"
		end

	end

	#
	# Sync a local database to the stage site
	#
	def self.db_sync(site, *branch)
		branch_from = branch[0]
		branch_to = branch[1] ? branch[1] : branch[0]
		db_name = "#{site}_local_#{branch_to.gsub('-', '_')}"
		db_exists = `mysql -e 'show databases' | grep #{db_name}`.strip == db_name

		# If the database does not exist, import it from stage
		if !db_exists
			system "drush @#{site}.stage.#{branch_from} sql-dump > #{site}.stage.#{branch_to}.sql &&" +
				 "mysql -e 'create database if not exists #{db_name}' &&" +
				 "mysql #{db_name} < #{site}.stage.#{branch_to}.sql &&" +
				 "rm #{site}.stage.#{branch_to}.sql &&" +
				 "drush sql-sync @#{site}.stage.#{branch_from} @#{site}.local.#{branch_to} -y --create-db"
		else
			system "drush sql-sync @#{site}.stage.#{branch_from} @#{site}.local.#{branch_to} -y --create-db"
		end
	end

	#
	# Sync local files to the stage site
	#
	def self.file_sync(site, *branch)
		branch_from = branch[0]
		branch_to = branch[1] ? branch[1] : branch[0]
		system "drush -y --mode=zrpt rsync @#{site}.stage.#{branch_from}:%files @#{site}.local.#{branch_to}:%files --delete"
	end

	#
	# Sync both database and files to the stage site
	#
	def self.site_sync(site, *branch)
		self.db_sync(site, *branch)
		self.file_sync(site, *branch)
	end

	#
	# Create database settings in settings.php
	#
	def self.create_settings(site, *branch)
		branch = branch[0]

		# Get the settings files
		settings_root = "/srv/build/#{site}/#{branch}/webroot/sites/default/"
		default_settings_file = settings_root + "default.settings.php"
		settings_file = settings_root + "settings.php"

		# Setup database settings
		db_settings = "$databases = array(\n" +
			"	'default' => array (\n" +
			"   	'default' => array (\n" +
			"      'database' => '#{site}_local_#{branch.gsub('-','_')}',\n" +
			"      'username' => 'root',\n" +
			"      'password' => '',\n" +
			"      'host' => 'localhost',\n" +
			"      'port' => '',\n" +
			"      'driver' => 'mysql',\n" +
			"      'prefix' => '',\n" +
			"    ),\n" +
			"  ),\n" +
			");"

		# Check if we should overwrite
		if File.exists?(settings_file)
			print "Overwrite existing settings.php? (y/n): "
			if STDIN.gets.chomp.downcase != 'y'
				puts 'Aborted'
				exit
			end
		end

		# Create new settings
		new_settings = File.read(default_settings_file).gsub(/^\$databases = array\(\);/, db_settings)
		new_settings_file = File.open(settings_file, 'w+')
		new_settings_file.puts(new_settings)
		new_settings_file.close
		puts "Created settings.php with database set to #{site}_local_#{branch}"
	end

	def self.nginx_create(site, *null)

		if( !File.directory? "/etc/nginx/conf.d" )
			puts "/etc/nginx/conf.d does not exist on this system so this command fails now."
			exit
		end

		input_file = "/etc/nginx/vhost-example.conf"
		output_file = "/etc/nginx/conf.d/#{site}.conf"
		
		# Check if we should overwrite
		if File.exists?(output_file)
			print "Overwrite existing file? (y/n): "
			if STDIN.gets.chomp.downcase != 'y'
				puts 'Aborted'
				exit
			end
		end

		example_content = File.read(input_file)
		new_content = example_content.gsub(/projectcode/, site)

		File.open("/etc/nginx/conf.d/#{site}.conf", 'w+') { |file| file.puts new_content }
		puts new_content
	end

	#
	# Show a list of valid commands
	#
	def self.show_available_functions
		puts
		puts color("Usage", 'yellow')
		puts "gk <command> [site] [branch]"
		puts
		puts color("Available commands", 'yellow')
		puts color("setup-site", 'green') + "       Create site structure, checkout site and make it."
		puts color("db-sync", 'green') + "          Create/sync database with stage site: db-sync <site> [branch_from [branch_to]]."
		puts color("file-sync", 'green') + "        Download/sync files with stage site: file-sync <site> [branch_from [branch_to]]"
		puts color("site-sync", 'green') + "        Run db-sync and file-sync: site-sync <site> [branch_from [branch_to]]"
		puts color("create-settings", 'green') + "  Create database settings in settings.php."
		puts color("nginx-create", 'green') + "  		Create a new nginx conf file: nginx-create <site>"
		puts
		puts "db-sync, file-sync and site-sync, default to the 'develop' branch if none is supplied."
	end

	#
	# If an invalid command is passed, show valid commands
	#
	def self.method_missing(m, *args, &block)
		puts "Command not found"
		show_available_functions
	end
end

#
# Colorise output to terminal
#
def color(string, color)
	c = {
		'red' 		=> "\e[1;31m",
		'yellow' 	=> "\e[1;33m",
		'green' 	=> "\e[1;32m",
	}
	"#{c[color]}#{string}\e[1;0m"
end


# Run commands
if ARGV.length > 0
	# First argument is the command to run
	command = ARGV[0].gsub('-', '_')

	# Second argument is the site
	site = ARGV[1]
	if !site
		print "Sitename: "
		site = STDIN.gets.chomp
	end

	# Third argument is the branch
	branch = ARGV[2]? ARGV[2] : 'develop'

	# Extra arguments if available
	other = ARGV[3]? ARGV.slice(3) : nil

	# Run command with arguments
	# puts command, site, branch
	GK.send(command, site, branch, other)
else
	GK.show_available_functions
end
