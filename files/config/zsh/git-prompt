#!/bin/zsh

blue="%F{038}"
cyan="%F{079}"
green="%F{041}"
yellow="%F{172}"
orange="%F{202}"
red="%F{160}"
grey="%F{245}"

function __git_prompt_state() {
	state=$(git status -s --porcelain 2>/dev/null)
	pipe="%F{245}|%f"

	M=$(echo "$state" | grep -E '^.(M|T|C|U)' | wc -l | xargs)
	A=$(echo "$state" | grep -E '^.\?' | wc -l | xargs)
	D=$(echo "$state" | grep -E '^.D' | wc -l | xargs)
	R=$(echo "$state" | grep -E '^.R' | wc -l | xargs)

	unstaged=""
	[[ "$M" -gt 0 ]] && unstaged+="${orange}•${M}%f"
	[[ "$D" -gt 0 ]] && unstaged+="${red}-${D}%f"
	[[ "$R" -gt 0 ]] && unstaged+="${yellow}~${D}%f"
	[[ "$A" -gt 0 ]] && unstaged+="${cyan}?${A}%f"

	Mi=$(echo "$state" | grep -E '^(M|T|C|U)' | wc -l | xargs)
	Ai=$(echo "$state" | grep -E '^A' | wc -l | xargs)
	Di=$(echo "$state" | grep -E '^D' | wc -l | xargs)
	Ri=$(echo "$state" | grep -E '^R' | wc -l | xargs)

	staged=""
	[[ "$Mi" -gt 0 ]] && staged+="${blue}•${Mi}%f"
	[[ "$Ai" -gt 0 ]] && staged+="${blue}+${Ai}%f"
	[[ "$Di" -gt 0 ]] && staged+="${blue}-${Di}%f"
	[[ "$Ri" -gt 0 ]] && staged+="${blue}~${Ri}%f"


	output="${staged}${unstaged}"
	if [ "$staged" != "" ] && [ "$unstaged" != "" ]; then
		output="${staged}${pipe}${unstaged}"
	fi

	if [ "$output" != "" ]; then
		print -P " $output"
	fi
}

function __git_prompt_pos() {
	local branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||');
	local rev=$(git rev-list --left-right $branch...origin/$branch 2>/dev/null)
	local ahead=$(echo "$rev" | grep -c '^<' | tr -d ' ');
	local behind=$(echo "$rev" | grep -c '^>' | tr -d ' ');
	local pos="";
	if [[ "$ahead" -gt 0 ]]; then pos+="↑$ahead"; fi
	if [[ "$behind" -gt 0 ]]; then pos+="↓$behind"; fi
	if [[ "$pos" != "" ]]; then
		print -P " ${blue}$pos%f";
	fi
}

function __git_prompt_branch() {
	# Get curent branch
	local branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

	# If branch is empty find hash
	if [[ -z "$branch" ]]; then
		branch="#"$(git rev-parse --short HEAD);

		local tag=$(git describe --tags 2>/dev/null)
		if [[ -n "$tag" ]]; then
		branch="@$tag"
		fi
	fi

	print -P "$branch"
}

# Compile git prompt using branch, status and position
function git_prompt() {
	# check if we're in a git repo
	git rev-parse &>/dev/null || return;

	# check if we're not in a .git folder in the repo
	[[ $(git rev-parse --is-inside-work-tree) == 'false' ]] && return;

	changes=$(git status -s --porcelain | wc -l | xargs)
	[[ "$changes" -gt 0 ]] && color="${orange}" || color="${green}"
	print -P " ${color}($(__git_prompt_branch)$(__git_prompt_state)$(__git_prompt_pos)${color})%f"
}