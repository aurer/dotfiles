#!/usr/bin/env php
<?php

/*******************************************************************************
 * This file is managed centrally, any manual changes might be overwritten
 ******************************************************************************/

class Webdev {
	private $config_file;
	private $config;

	function __construct() {
		$this->config_file = __DIR__ . '/webdev-tools.conf';
		$this->run_set_environment();
	}

	/*
	 * Rebuild a site using phing and deployDevelop option
	 */
	public function rebuild($site) {
		$source_dir = str_replace('webdev-tools', 'gkdigital', $this->config['webdev_path']);
		if (!is_dir($source_dir . "/$site/source")) {
			echo "Project files not present ({$source_dir}/{$site}/source)- running getProject...\n";
			system("phing -f {$this->config['webdev_path']}/phing/buildfiles/{$site}-build.xml getProject");
		}
		echo "Running deploy.{$this->config['env']} for $site\n";
		system("phing -f {$this->config['webdev_path']}/phing/buildfiles/{$site}-build.xml deploy.{$this->config['env']}");
	}

	/*
	 * Create database
	 */
	public function create_database($site) {
		echo "Running createDatabase.{$this->config['env']} for $site";
		system("phing -f {$this->config['webdev_path']}/phing/buildfiles/{$site}-build.xml createDatabase.{$this->config['env']}");
	}

	/*
	 * cleanup Build Directories
	 */
	public function cleanup($site) {
		echo "Running cleanupBuildDirectories.{$this->config['env']} for $site";
		system("phing -f " . $this->config['webdev_path'] . "/phing/buildfiles/{$site}-build.xml cleanupBuildDirectories.{$this->config['env']}");
	}

	/*
	 * Initialise a folder with a git repository
	 */
	public function git_init($remote, $branch='develop') {
		echo "Initialising with {$remote}...";
		system("git init");
		system("git remote add origin {$remote}");
		system("git fetch");
		system("git checkout -f {$branch}");
	}

	/*
	 * Force rebuild the webdev config
	 */
	public function set_environment() {
		$this->run_set_environment(true);
	}

	/*
	 * Update the webdev-tools repository
	 */
	public function self_update() {
		$root = __DIR__;
		$branch = exec("cd $root && git rev-parse --abbrev-ref HEAD");
		system("cd $root && sudo git pull origin $branch && cd -");
	}

	/*
	 * Work out the environment i.e. local, stage or production
	 */
	private function run_set_environment($force=false) {
		$this->config = array();
		if ($force OR !file_exists($this->config_file)) {
			$env = readline('What environment is this? (local|stage|production): ');
			$webdev_path = readline('Where are the webdev tools? (e.g. /srv/build/webdev-tools): ');

			if (in_array($env, array('local', 'stage', 'production'))) {
				fopen($this->config_file, 'w');
				$this->write_config('env', $env);
				$this->write_config('webdev_path', rtrim($webdev_path, '/'));
				echo "Created config: {$this->config_file}\n";
			} else {
				echo "Please specify local, stage or production\n";
				return;
			}
		}

		$this->config = $this->read_config();
	}

	/*
	 * Open the config in VIM
	 */
	public function edit_webdev_config() {
		echo "Opening.{$this->config_file}";
		system("vim {$this->config_file}  > `tty`");
	}

	/*
	 * Show a list of valid commands
	 */
	public function show_available_functions() {
		echo color("Usage", 'grey') . "\n";
		echo "webdev <command> [site]" . "\n\n";
		echo color("Available commands", 'grey') . "\n";
		echo color("rebuild", 'green') . " <site>           Rebuild a site using phing commands.\n";
		echo color("create-database", 'green') . " <site>   Sets up a database for a site using phing commands.\n";
		echo color("cleanup", 'green') . " <site>           Clean up build directories for a site using phing commands.\n";
		echo color("git-init", 'green') . " <remote>        Initialise a folder with a git repository.\n";
		echo color("set-environment", 'green') . "          Re-run the configuration script.\n";
		echo color("self-update", 'green') . "              Update the webdev-tools repository.\n";
	}

	/*
	 * If an invalid command is passed, show valid commands
	 */
	private function method_missing() {
		echo "Command not found";
		show_available_functions();
	}

	/*
	 * Write an option to the config
	 */
	private function write_config($key, $value) {
		$config = $this->read_config();
		$config[$key] = $value;
		$file = fopen($this->config_file, 'w');
		fwrite($file, json_encode($config, 128));
		fclose($file);
	}

	/*
	 * Get all values from the config
	 */
	private function read_config() {
		$config_file = file_get_contents($this->config_file);
		if (count($config_file) > 0) {
			$config = json_decode($config_file, true);
		} else {
			$config = array();
		}
		return $config;
	}
}

/*
 * Colorise output to terminal
 */
function color($string, $color) {
	$c = array(
		'red' 		=> system("tput setaf 160"),
		'yellow' 	=> system("tput setaf 214"),
		'green' 	=> system("tput setaf 113"),
		'grey'    => system("tput setaf 240"),
	);
	return "{$c[$color]}{$string}" . system("tput sgr0");
}

/*
 * Run commands
 */
$webdev =  new Webdev;
if (count($argv) > 1) {
	// First argument is the command to run
	array_shift($argv);
	$command = str_replace('-', '_', $argv[0]);

	// Get arguments required by the given command
	$r = new ReflectionMethod('Webdev', $command);
	$required_arguments = array_filter($r->getParameters(), function($arg){
		return !$arg->isOptional();
	});

	// If not enough arguments are passed, ask for them
	if (count($argv) < count($required_arguments) + 1) {
		$passed_arguments = array();
		echo "Please provide the following details: \n";
		foreach ($required_arguments as $arg) {
			$passed_arguments[] = readline(ucfirst($arg->name) . ': ');
		}
	} else {
		$passed_arguments = array_slice($argv, 1);
	}

	// Run the given command pasing in supplied arguments
	switch ($required_arguments) {
	 	case 0:
	 		call_user_method($command, $webdev);
	 	break;

	 	default:
	 		call_user_func_array(array($webdev, $command), $passed_arguments);
	 	break;
	}
} else {
	$webdev->show_available_functions();
}
