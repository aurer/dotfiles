#!/usr/bin/env ruby

class GK
	#
	# Clone and make a site
	#
	def self.setup_site(*sitename)

		# Show a warning if we're not in /srv directory
		if !Dir.pwd.start_with?('/srv')
			puts "This command should be run from /srv/build or similar"
			puts "-----------------------------------------------------"
		end

		# Get the sites name
		if sitename.empty?
			print "Site to clone: "
			sitename = gets.chomp
		end

		# Get the branch (default to develop)
		print "Branch (develop): "
		branch = gets.chomp
		branch = 'develop' if branch.empty?

		# Get the branch (default to develop)
		print "Make the site? (Y/n): "
		make = gets.chomp.downcase == 'y' ? true : false

		# Set up git url
		git_url = "git@bitbucket.org:greeneking/#{sitename}.git"

		# Clone site
		system "mkdir -p #{sitename}/#{branch}/logs"
		Dir.chdir Dir.pwd + "/#{sitename}/#{branch}"
		system "git clone #{git_url} webroot && cd webroot && git checkout #{branch}"

		# Make site
		if make
			Dir.chdir Dir.pwd + "/webroot"
			system "drush make #{sitename}.make --working-copy"
		end
	end

	#
	# Sync a local database to the stage site
	#
	def self.db_sync(*sitename)
		if sitename.empty?
			print "Sitename: "
			sitename = gets.chomp
		end

		system "drush sql-sync @#{sitename}.stage.develop @#{sitename}.local.develop -y --create-db"
	end

	#
	# Sync local files to the stage site
	#
	def self.file_sync(*sitename)
		if sitename.empty?
			print "Sitename: "
			sitename = gets.chomp
		end

		system "drush -y --mode=zrpt rsync @#{sitename}.stage.develop:%files @#{sitename}.local.develop:%files --delete"
	end

	#
	# Sync both database and files to the stage site
	#
	def self.site_sync(*sitename)
		if sitename.empty?
			print "Sitename: "
			sitename = gets.chomp
		end

		self.db_sync sitename
		self.file_sync sitename
	end

	#
	# Show a list of valid commands
	#
	def self.show_available_functions
		puts
		puts color("Available commands", 'yellow')
		puts color("setup-site", 'green') + "     Create site structure, checkout site and make it"
		puts color("db-sync", 'green') + "        Create/sync database with stage site"
		puts color("file-sync", 'green') + "      Download/sync files with stage site"
		puts color("site_sync", 'green') + "      Run db-sync and file-sync"
	end

	#
	# If an invalid command is passed, show valid commands
	#
	def self.method_missing(m, *args, &block)
		show_available_functions
	end
end

#
# Colorise output to terminal
#
def color(string, color)
	c = {
		'red' 		=> "\e[1;31m",
		'yellow' 	=> "\e[1;33m",
		'green' 	=> "\e[1;32m",
	}
	"#{c[color]}#{string}\e[1;0m"
end


# Run commands
if ARGV.length > 0
	command = ARGV.shift.gsub(/-/, '_')
	arguments = ARGV
	GK.send(command, *arguments)
else
	GK.show_available_functions
end
